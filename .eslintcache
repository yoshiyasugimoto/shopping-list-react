[{"/Users/sugimotoyoshiwataru/Documents/project/my_project/JS/TS/react/react-hooks-ts/src/App.tsx":"1"},{"size":3287,"mtime":1612153172849,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"10uepwd","/Users/sugimotoyoshiwataru/Documents/project/my_project/JS/TS/react/react-hooks-ts/src/App.tsx",["7"],"import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronRight,\n  faChevronLeft,\n  faCircle,\n  faCheckCircle,\n  faPlus,\n} from \"@fortawesome/free-solid-svg-icons\";\n\n\ntype Item = {\n  itemName: string\n  quantity: number\n  isSelected: boolean\n}\n\nconst App = () => {\n  const [items, setItems] = useState<Item[]>([]);\n\n  const [inputValue, setInputValue] = useState<string>(\"\")\n\n  const [totalItemCount, setTotalItemCount] = useState(0)\n\n  const calculateTotal = () => {\n    const totalItemCount = items.reduce((total, item) => {\n      return total + item.quantity\n    }, 0)\n    if (totalItemCount > 0) { setTotalItemCount(totalItemCount) }\n  }\n\n  const handleAddButtonClick = () => {\n\n    const newItem: Item = {\n      itemName: inputValue,\n      quantity: 1,\n      isSelected: false\n    }\n\n    const newItems = [...items, newItem]\n\n    setItems(newItems)\n\n    setInputValue(\"\")\n    console.log(items)\n\n    calculateTotal()\n  }\n\n  const toggleComplete = (index: number) => {\n    const newItems = [...items]\n    newItems[index].isSelected = !newItems[index].isSelected\n    setItems(newItems)\n  }\n\n  const handleQuantityDecrease = (index: number) => {\n    const newItems = [...items]\n    if (newItems[index].quantity > 0) {\n      newItems[index].quantity--\n      setItems(newItems)\n      calculateTotal()\n    }\n  }\n\n  const handleQuantityIncrease = (index: number) => {\n    const newItems = [...items]\n    newItems[index].quantity++\n    setItems(newItems)\n    calculateTotal()\n  }\n\n  return (\n    <div className=\"app-background\">\n      <div className=\"main-container\">\n        <div className=\"add-item-box\">\n          <input value={inputValue} onChange={(event) => setInputValue(event.target.value)} className=\"add-item-input\" placeholder=\"Add an item...\" />\n          <FontAwesomeIcon icon={faPlus} onClick={() => handleAddButtonClick()} />\n        </div>\n        <div className=\"item-list\">\n          {items.map((item, index) => (\n            <div className=\"item-container\">\n              <div className=\"item-name\" onClick={() => toggleComplete(index)}>\n                {item.isSelected ? (\n                  <>\n                    <FontAwesomeIcon icon={faCheckCircle} />\n                    <span className=\"completed\">{item.itemName}</span>\n                  </>\n                ) : (\n                    <>\n                      <FontAwesomeIcon icon={faCircle} />\n                      <span>{item.itemName}</span>\n                    </>\n                  )}\n              </div>\n              <div className=\"quantity\">\n                <button>\n                  <FontAwesomeIcon\n                    icon={faChevronLeft}\n                    onClick={() => handleQuantityDecrease(index)}\n                  />\n                </button>\n                <span> {item.quantity} </span>\n                <button>\n                  <FontAwesomeIcon\n                    icon={faChevronRight}\n                    onClick={() => handleQuantityIncrease(index)}\n                  />\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"total\">Total:{totalItemCount} </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",{"ruleId":"8","severity":1,"message":"9","line":1,"column":27,"nodeType":"10","messageId":"11","endLine":1,"endColumn":36},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar"]